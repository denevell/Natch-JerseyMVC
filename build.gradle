apply plugin: 'war'
apply plugin: 'eclipse'

repositories {
    mavenCentral()
}

dependencies {
    providedCompile 'org.eclipse.jetty:jetty-jsp:9.1.0.M0'
    providedCompile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.6'
    providedCompile 'org.apache.commons:commons-lang3:3.1'
    providedCompile 'org.eclipse.jetty:jetty-annotations:9.1.0.M0'
    compile 'org.glassfish.jersey.core:jersey-client:2.6'
    compile 'com.github.spullara.mustache.java:compiler:0.8.12'
    compile 'org.apache.httpcomponents:httpclient:4.3.5'
    //compile 'org.hibernate:hibernate-validator:5.1.0.CR1'
    compile 'org.pegdown:pegdown:1.2.1'
    compile 'log4j:log4j:1.2.7'
    compile 'org.slf4j:slf4j-log4j12:1.6.6'
    compile project(':ServletGenerator')

    testCompile 'postgresql:postgresql:9.1-901-1.jdbc4'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'junit:junit-dep:4.11'
    
    testCompile 'org.seleniumhq.selenium:selenium-java:2.43.1'
    //testCompile "com.github.detro.ghostdriver:phantomjsdriver:1.0.4"
    testCompile 'net.sourceforge.htmlunit:htmlunit:2.15'
}

compileJava {
	sourceCompatibility = JavaVersion.VERSION_1_7
	targetCompatibility = JavaVersion.VERSION_1_7
}


test {
	    testLogging.events = ['failed','passed']
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
}

task jettyStop() << {
        println("Stopping Jetty based on its WAR name")
        ["bash", "-c", "ps -aux | grep -v grep | grep 'java.* -jar.* Natch-JerseyMvc-ForAutomatedTests.war' | awk '{ print \$2}' | xargs kill -9"].execute()
        sleep(1000)
}
task jettyStopProd() << {
        println("Stopping production Jetty based on its WAR name")
        ["bash", "-c", "ps -aux | grep -v grep | grep 'java .* -jar .* Natch-JerseyMvc-Production.war' | awk '{ print \$2}' | xargs kill -9"].execute()
        sleep(1000)
}

task jettyStart(dependsOn: [jettyStop]) << {
        println("Starting Jetty")
        def cmd = ["bash", "-c", "java -Xdebug -Xrunjdwp:transport=dt_socket,address=8009,server=y,suspend=n -server -Xmx50m -jar jetty-runner-9.1.0.M0.jar --port 8081 Natch-JerseyMvc-ForAutomatedTests.war &> logs/jetty-stdout-stderr.log"].execute()
        cmd.in.close()
        cmd.out.close()
        cmd.err.close()
        println("Waiting 7 seconds to settle")
        sleep(7000)
        println("Finished waiting")
}

task jettyStartProd(dependsOn: [jettyStopProd]) << {
	println("Starting production Jetty on port ")
	def cmd = ["bash", "-c", "java -server -Xmx50m -jar jetty-runner-9.1.0.M0.jar --port 8081 Natch-JerseyMvc-Production.war &> logs/jetty-stdout-stderr.log"].execute()
	cmd.in.close()
	cmd.out.close()
	cmd.err.close()
	println("Waiting 10 seconds to settle")
	sleep(10000)
	println("Finished waiting")
}

if(project.hasProperty('PRODUCTION')) {
	war.classifier = 'Production'
    sourceSets.main.resources.srcDirs 'src/main/resources', 'src/prod/resources'
} else {
	war.classifier = 'ForAutomatedTests'
}

war.destinationDir = new File(".")
// build.dependsOn = [ap]
